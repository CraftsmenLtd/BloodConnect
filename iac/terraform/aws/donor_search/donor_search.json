{
  "Comment": "State machine for donor search process",
  "StartAt": "PrepareDonorSearch",
  "States": {
    "PrepareDonorSearch": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "QueryDonorsFound",
          "States": {
            "QueryDonorsFound": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "Parameters": {
                "TableName": "${DYNAMODB_TABLE_NAME}",
                "KeyConditionExpression": "PK = :seekerId AND begins_with(SK, :requestPostId)",
                "ExpressionAttributeValues": {
                  ":seekerId": {
                    "S.$": "States.Format('BLOOD_REQ#{}', $.seekerId)"
                  },
                  ":requestPostId": {
                    "S.$": "States.Format('ACCEPTED#{}', $.requestPostId)"
                  }
                }
              },
              "ResultPath": "$.donorsFoundCount",
              "Next": "PerformCalculations"
            },
            "PerformCalculations": {
              "Type": "Task",
              "Resource": "${DONOR_CALCULATE_LAMBDA_ARN}",
              "Parameters": {
                "bloodQuantity.$": "$.bloodQuantity",
                "donorsFoundCount.$": "$.donorsFoundCount.Count",
                "urgencyLevel.$": "$.urgencyLevel",
                "donationDateTime.$": "$.donationDateTime",
                "retryCount.$": "$.retryCount"
              },
              "ResultPath": "$.calculationResults",
              "End": true
            }
          }
        }
      ],
      "ResultSelector": {
        "totalDonorsToNotify.$": "$.[0].calculationResults.totalDonorsToNotify",
        "delayPeriod.$": "$.[0].calculationResults.delayPeriod",
        "eligibleDonors": []
      },
      "ResultPath": "$.prepareDonorSearchResult",
      "Next": "DonorSearchProcess"
    },
    "DonorSearchProcess": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "QueryEligibleDonors",
          "States": {
            "QueryEligibleDonors": {
              "Type": "Task",
              "Resource": "${QUERY_ELIGIBLE_DONORS_LAMBDA_ARN}",
              "Parameters": {
                "seekerId.$": "$.seekerId",
                "createdAt.$": "$.createdAt",
                "requestPostId.$": "$.requestPostId",
                "geohash.$": "$.geohash",
                "city.$": "$.city",
                "neededBloodGroup.$": "$.neededBloodGroup",
                "eligibleDonors.$": "$.prepareDonorSearchResult.eligibleDonors",
                "totalDonorsToNotify.$": "$.prepareDonorSearchResult.totalDonorsToNotify"
              },
              "ResultPath": "$.checkDonorSearchResult",
              "Next": "DecideNextStep"
            },
            "DecideNextStep": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.checkDonorSearchResult.action",
                  "StringEquals": "EnoughDonorsFound",
                  "Next": "EnoughDonorsFound"
                },
                {
                  "Variable": "$.checkDonorSearchResult.action",
                  "StringEquals": "RetryDonorsSearch",
                  "Next": "RetryDonorsSearch"
                }
              ],
              "Default": "EnoughDonorsFound"
            },
            "RetryDonorsSearch": {
              "Type": "Pass",
              "Parameters": {
                "totalDonorsToNotify.$": "$.prepareDonorSearchResult.totalDonorsToNotify",
                "delayPeriod.$": "$.prepareDonorSearchResult.delayPeriod",
                "eligibleDonors.$": "$.checkDonorSearchResult.eligibleDonors"
              },
              "ResultPath": "$.prepareDonorSearchResult",
              "Next": "QueryEligibleDonors"
            },
            "EnoughDonorsFound": {
              "Type": "Succeed"
            }
          }
        }
      ],
      "ResultSelector": {
        "eligibleDonors.$": "$.[0].checkDonorSearchResult.eligibleDonors"
      },
      "ResultPath": "$.donorSearchResult",
      "Next": "NotifyDonors"
    },
    "NotifyDonors": {
      "Type": "Map",
      "ItemsPath": "$.donorSearchResult.eligibleDonors",
      "Parameters": {
        "donorId.$": "$$.Map.Item.Value.userId",
        "locationId.$": "$$.Map.Item.Value.locationId",
        "seekerId.$": "$.seekerId",
        "requestPostId.$": "$.requestPostId",
        "createdAt.$": "$.createdAt",
        "seekerName.$": "$.seekerName",
        "patientName.$": "$.patientName",
        "location.$": "$.location",
        "contactNumber.$": "$.contactNumber",
        "transportationInfo.$": "$.transportationInfo",
        "shortDescription.$": "$.shortDescription",
        "neededBloodGroup.$": "$.neededBloodGroup",
        "bloodQuantity.$": "$.bloodQuantity",
        "urgencyLevel.$": "$.urgencyLevel",
        "donationDateTime.$": "$.donationDateTime",
        "message.$": "$.message"
      },
      "Iterator": {
        "StartAt": "SendDonorNotificationToSQS",
        "States": {
          "SendDonorNotificationToSQS": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
            "Parameters": {
              "QueueUrl": "${NOTIFICATION_QUEUE_URL}",
              "MessageBody": {
                "userId.$": "$.donorId",
                "title": "Blood Request",
                "body.$": "$.message",
                "type": "BLOOD_REQ_POST",
                "payload": {
                  "seekerId.$": "$.seekerId",
                  "requestPostId.$": "$.requestPostId",
                  "createdAt.$": "$.createdAt",
                  "locationId.$": "$.locationId",
                  "seekerName.$": "$.seekerName",
                  "patientName.$": "$.patientName",
                  "neededBloodGroup.$": "$.neededBloodGroup",
                  "bloodQuantity.$": "$.bloodQuantity",
                  "urgencyLevel.$": "$.urgencyLevel",
                  "location.$": "$.location",
                  "contactNumber.$": "$.contactNumber",
                  "transportationInfo.$": "$.transportationInfo",
                  "shortDescription.$": "$.shortDescription",
                  "donationDateTime.$": "$.donationDateTime"
                }
              },
              "DelaySeconds": 0
            },
            "End": true
          }
        }
      },
      "ResultPath": "$.notifications",
      "Next": "SendSqsMessage"
    },
    "SendSqsMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "Parameters": {
        "QueueUrl": "${DONOR_SEARCH_RETRY_QUEUE_URL}",
        "MessageBody": {
          "PK.$": "States.Format('BLOOD_REQ#{}', $.seekerId)",
          "SK.$": "States.Format('BLOOD_REQ#{}#{}', $.createdAt, $.requestPostId)",
          "neededBloodGroup.$": "$.neededBloodGroup",
          "bloodQuantity.$": "$.bloodQuantity",
          "urgencyLevel.$": "$.urgencyLevel",
          "city.$": "$.city",
          "location.$": "$.location",
          "geohash.$": "$.geohash",
          "donationDateTime.$": "$.donationDateTime",
          "contactNumber.$": "$.contactNumber",
          "patientName.$": "$.patientName",
          "transportationInfo.$": "$.transportationInfo",
          "shortDescription.$": "$.shortDescription"
        },
        "DelaySeconds.$": "$.prepareDonorSearchResult.delayPeriod"
      },
      "End": true
    }
  }
}