{
  "Comment": "State machine for donor search process",
  "StartAt": "PrepareDonorSearch",
  "States": {
    "PrepareDonorSearch": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "QueryDonorsFound",
          "States": {
            "QueryDonorsFound": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "Parameters": {
                "TableName": "${DYNAMODB_TABLE_NAME}",
                "KeyConditionExpression": "PK = :seekerId AND begins_with(SK, :requestPostId)",
                "ExpressionAttributeValues": {
                  ":seekerId": {
                    "S.$": "States.Format('BLOOD_REQ#{}', $.seekerId)"
                  },
                  ":requestPostId": {
                    "S.$": "States.Format('ACCEPTED#{}', $.requestPostId)"
                  }
                }
              },
              "ResultPath": "$.donorsFoundCount",
              "Next": "PerformCalculations"
            },
            "PerformCalculations": {
              "Type": "Task",
              "Resource": "${DONOR_CALCULATE_LAMBDA_ARN}",
              "Parameters": {
                "bloodQuantity.$": "$.bloodQuantity",
                "donorsFoundCount.$": "$.donorsFoundCount.Count",
                "urgencyLevel.$": "$.urgencyLevel",
                "donationDateTime.$": "$.donationDateTime",
                "retryCount.$": "$.retryCount"
              },
              "ResultPath": "$.calculationResults",
              "End": true
            }
          }
        }
      ],
      "ResultSelector": {
        "totalDonorsToNotify.$": "$.[0].calculationResults.totalDonorsToNotify",
        "geohash.$": "$.[0].geohash",
        "neededBloodGroup.$": "$.[0].neededBloodGroup",
        "city.$": "$.[0].city",
        "delayPeriod.$": "$.[0].calculationResults.delayPeriod"
      },
      "ResultPath": "$.prepareDonorSearchResult",
      "Next": "DonorSearchProcess"
    },
    "DonorSearchProcess": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "QueryEligibleDonors",
          "States": {
            "QueryEligibleDonors": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "Parameters": {
                "TableName": "${DYNAMODB_TABLE_NAME}",
                "IndexName": "GSI1",
                "KeyConditionExpression": "GSI1PK = :cityAndBloodGroupAndStatus AND begins_with(GSI1SK, :geohash)",
                "ExpressionAttributeValues": {
                  ":cityAndBloodGroupAndStatus": {
                    "S.$": "States.Format('CITY#{}#BG#{}#DONATIONSTATUS#yes', $.city, $.neededBloodGroup)"
                  },
                  ":geohash": {
                    "S.$": "$.prepareDonorSearchResult.geohash"
                  }
                }
              },
              "ResultPath": "$.eligibleDonors",
              "Next": "CheckDonorStatus"
            },
            "CheckDonorStatus": {
              "Type": "Task",
              "Resource": "${DONOR_SEARCH_EVALUATOR_LAMBDA_ARN}",
              "Parameters": {
                "geohash.$": "$.prepareDonorSearchResult.geohash",
                "eligibleDonorsCount.$": "$.eligibleDonors.Count",
                "totalDonorsToNotify.$": "$.prepareDonorSearchResult.totalDonorsToNotify",
                "eligibleDonors.$": "$.eligibleDonors.Items"
              },
              "ResultPath": "$.checkDonorSearchResult",
              "Next": "DecideNextStep"
            },
            "DecideNextStep": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.checkDonorSearchResult.action",
                  "StringEquals": "EnoughDonorsFound",
                  "Next": "EnoughDonorsFound"
                },
                {
                  "Variable": "$.checkDonorSearchResult.action",
                  "StringEquals": "UpdateSearchFields",
                  "Next": "UpdateSearchFields"
                }
              ],
              "Default": "EnoughDonorsFound"
            },
            "UpdateSearchFields": {
              "Type": "Pass",
              "Parameters": {
                "totalDonorsToNotify.$": "$.prepareDonorSearchResult.totalDonorsToNotify",
                "city.$": "$.prepareDonorSearchResult.city",
                "geohash.$": "$.checkDonorSearchResult.shortenedGeohash",
                "neededBloodGroup.$": "$.prepareDonorSearchResult.neededBloodGroup",
                "delayPeriod.$": "$.prepareDonorSearchResult.delayPeriod"
              },
              "ResultPath": "$.prepareDonorSearchResult",
              "Next": "QueryEligibleDonors"
            },
            "EnoughDonorsFound": {
              "Type": "Succeed"
            }
          }
        }
      ],
      "ResultSelector": {
        "donorIds.$": "$.[0].checkDonorSearchResult.userIds"
      },
      "ResultPath": "$.donorSearchResult",
      "Next": "NotifyDonors"
    },
    "NotifyDonors": {
      "Type": "Map",
      "ItemsPath": "$.donorSearchResult.donorIds",
      "Parameters": {
        "donorId.$": "$$.Map.Item.Value",
        "patientName.$": "$.patientName",
        "requestPostId.$": "$.requestPostId",
        "location.$": "$.location",
        "contactNumber.$": "$.contactNumber",
        "transportationInfo.$": "$.transportationInfo",
        "shortDescription.$": "$.shortDescription",
        "neededBloodGroup.$": "$.neededBloodGroup",
        "bloodQuantity.$": "$.bloodQuantity",
        "urgencyLevel.$": "$.urgencyLevel",
        "donationDateTime.$": "$.donationDateTime",
        "message.$": "$.message"
      },
      "Iterator": {
        "StartAt": "ConstructApiPath",
        "States": {
          "ConstructApiPath": {
            "Type": "Pass",
            "Parameters": {
              "ApiEndpoint": "${API_GATEWAY_ID}.execute-api.ap-south-1.amazonaws.com",
              "Stage": "api",
              "Path.$": "States.Format('/notification/push/{}', $.donorId)",
              "RequestBody": {
                "title": "Blood Request",
                "body.$": "$.message",
                "requestPostId.$": "$.requestPostId",
                "type": "bloodRequestPost",
                "data": {
                  "patientName.$": "$.patientName",
                  "neededBloodGroup.$": "$.neededBloodGroup",
                  "bloodQuantity.$": "$.bloodQuantity",
                  "urgencyLevel.$": "$.urgencyLevel",
                  "location.$": "$.location",
                  "contactNumber.$": "$.contactNumber",
                  "transportationInfo.$": "$.transportationInfo",
                  "shortDescription.$": "$.shortDescription",
                  "donationDateTime.$": "$.donationDateTime"
                }
              }
            },
            "ResultPath": "$.apiParams",
            "Next": "SendNotification"
          },
          "SendNotification": {
            "Type": "Task",
            "Resource": "arn:aws:states:::apigateway:invoke",
            "Parameters": {
              "ApiEndpoint.$": "$.apiParams.ApiEndpoint",
              "Method": "POST",
              "Headers": {
                "Content-Type": [
                  "application/json"
                ]
              },
              "Stage.$": "$.apiParams.Stage",
              "Path.$": "$.apiParams.Path",
              "RequestBody.$": "$.apiParams.RequestBody",
              "AuthType": "IAM_ROLE"
            },
            "ResultPath": "$.notificationResults",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "ResultPath": "$.notificationError",
                "Next": "HandleApiError"
              }
            ],
            "End": true
          },
          "HandleApiError": {
            "Type": "Pass",
            "Result": "Ignored error from API call",
            "ResultPath": "$.notificationResults",
            "End": true
          }
        }
      },
      "ResultPath": "$.notifications",
      "Next": "SendSqsMessage"
    },
    "SendSqsMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "Parameters": {
        "QueueUrl": "${SQS_RETRY_QUEUE_URL}",
        "MessageBody": {
          "PK.$": "States.Format('BLOOD_REQ#{}', $.seekerId)",
          "SK.$": "States.Format('BLOOD_REQ#{}#{}', $.createdAt, $.requestPostId)"
        },
        "DelaySeconds.$": "$.prepareDonorSearchResult.delayPeriod"
      },
      "End": true
    }
  }
}