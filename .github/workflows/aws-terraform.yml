name: Aws Environment Terraform

on:
  workflow_call:
    inputs:
      docker_image:
        description: "The runner image to be used"
        required: true
        type: string
      deployment_environment_group:
        description: "Defines the Deployment Environment Group for secrets"
        required: true
        type: string
      deployment_environment:
        description: "Defines the deployment environment for Makefile"
        required: true
        type: string
      tf_action:
        description: "Terraform action to perform"
        required: true
        type: string
      tf_backend_bucket_name:
        description: "Terraform backend bucket name. If empty, will default to 'TERRAFORM_BACKEND_BUCKET_NAME' from repository variables."
        required: false
        type: string
      tf_backend_bucket_key:
        description: "Terraform backend bucket key. If empty, will default to value '{deployment_environment_group}/{deployment_environment}.tfstate'."
        required: false
        type: string
      tf_backend_bucket_region:
        description: "Terraform backend bucket region. If empty, will default to value of 'aws_region' input."
        required: false
        type: string
      aws_region:
        description: "AWS region"
        required: true
        type: string

permissions:
  contents: read
  packages: write
  id-token: write

defaults:
  run:
    shell: bash

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  aws-terraform-env:
    name: Aws Environment Terraform
    runs-on: ${{ vars.RUNNER_OS }}
    environment: ${{ inputs.deployment_environment_group }}
    env:
      RUNNER_IMAGE_NAME: ${{ inputs.docker_image }}
      DEPLOYMENT_ENVIRONMENT_GROUP: ${{ inputs.deployment_environment_group }}
      DEPLOYMENT_ENVIRONMENT: ${{ inputs.deployment_environment }}
      TF_BACKEND_BUCKET_NAME: ${{ inputs.tf_backend_bucket_name || vars.TERRAFORM_BACKEND_BUCKET_NAME }}
      TF_BACKEND_BUCKET_KEY: ${{ inputs.tf_backend_bucket_key || format('{0}/{1}.tfstate', inputs.deployment_environment_group, inputs.deployment_environment) }}
      TF_BACKEND_BUCKET_REGION: ${{ inputs.tf_backend_bucket_region || inputs.aws_region }}
      AWS_REGION: ${{ inputs.aws_region }}
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      TF_VAR_aws_environment: ${{ inputs.deployment_environment }}
      TF_VAR_bloodconnect_domain: ${{ vars.BLOODCONNECT_DOMAIN }}
      TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
      TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      TF_VAR_facebook_client_id: ${{ secrets.FACEBOOK_CLIENT_ID  }}
      TF_VAR_facebook_client_secret: ${{ secrets.FACEBOOK_CLIENT_SECRET  }}
      TF_VAR_firebase_token_s3_url: ${{ secrets.FIREBASE_TOKEN_S3_URL }}
      TF_VAR_google_maps_api_key: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    steps:
      - name: üì• Checkout Branch
        uses: actions/checkout@v4

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Install Node Modules
        run: make run-command-install-node-packages

      - name: üéÅ Package Code
        run: make run-command-package-all

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ inputs.aws_region }}

      - name: üõ†Ô∏è Terraform Initialization
        run: make run-command-tf-init

      - name: üóìÔ∏è Terraform Plan ${{ inputs.tf_action }}
        run: make run-command-tf-plan-${{ inputs.tf_action }}

      - name: üöÄ Terraform ${{ inputs.tf_action }}
        run: make run-command-tf-${{ inputs.tf_action }}
