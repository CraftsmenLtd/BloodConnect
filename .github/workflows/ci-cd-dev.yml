name: "Continuous Deployment"
# This pipeline will run for all dev branches with push codes
# It will not run for master branch and git tags
# It will run all tests, lints and security checks

on:
  push:
    branches-ignore:
      - 'master'

permissions:
  contents: read
  packages: write


defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.ref }}

env:
  RUNNER_IMAGE_NAME: blood-connect-ci-image
  DOCKERFILE_PATH: ./Dockerfile
  CONTAINER_REGISTRY: ghcr.io

jobs:

  lint-test-security-deploy:
    name: Lint, Test, Security and Deploy Terraform
    runs-on: ubuntu-22.04
    environment: dev

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
      
      - name: Get Dockerfile MD5
        id: dockerfile_md5
        run: |
          md5=$(md5sum "${{ env.DOCKERFILE_PATH }}" | awk '{ print $1 }')
          echo "::set-output name=md5::$md5"

      - name: Set Runner Image Name
        run: |
            echo "RUNNER_IMAGE_NAME=${{ env.CONTAINER_REGISTRY }}/craftsmenltd/${{ env.RUNNER_IMAGE_NAME }}:${{ steps.dockerfile_md5.outputs.md5 }}" >> $GITHUB_ENV
            echo "FORMATTED_BRANCH_NAME=i-$(echo "${{ github.ref }}" | sed 's|.*/\(.*\)|\1|; s/#//')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Attempt to Pull Docker Image
        id: pull_docker_image
        run: docker pull ${{ env.RUNNER_IMAGE_NAME }}
        continue-on-error: true
        
      - name: Build Docker Image
        if: steps.pull_docker_image.outcome == 'failure'
        run: make build-runner-image

      - name: Push Docker Image
        if: steps.pull_docker_image.outcome == 'failure'
        run: docker push ${{ env.RUNNER_IMAGE_NAME }}
      
      - name: Install Node Modules
        run: make run-command-install-node-packages

      - name: Unit Test Code
        run: make run-command-test

      - name: Lint Code
        run: make run-command-lint-code

      - name: Package Code
        run: make run-command-package

      - name: Terraform Validation
        run: make run-command-tf-validate

      - name: Terraform Initialization Localstack
        run: make run-command-tf-init

      - name: Terraform Plan Localstack
        run: make run-command-tf-plan

      - name: Terraform Apply Localstack
        run: make run-command-tf-apply

      - name: Set Environment Variables for Dev Deployment
        run: |
          echo "DEPLOYMENT_ENVIRONMENT=dev-${{ env.FORMATTED_BRANCH_NAME }}" >> $GITHUB_ENV
          echo "TF_VARS_aws_environment=dev-${{ env.FORMATTED_BRANCH_NAME }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
          echo "TF_BACKEND_BUCKET_NAME=bloodconnect-ci-dev" >> $GITHUB_ENV
          echo "TF_BACKEND_BUCKET_KEY=dev/${{ env.FORMATTED_BRANCH_NAME }}.tfstate" >> $GITHUB_ENV
          echo "TF_BACKEND_BUCKET_REGION=ap-south-1" >> $GITHUB_ENV

    
      - name: Set Environment Variables for Dev Deployment
        run: echo $GITHUB_ENV

      - name: Set Environment Variables for Dev Deployment
        run: |
          echo "ALL_DOCKER_ENV=$(echo $GITHUB_ENV)" >> $GITHUB_ENV
        
      - name: Set Environment Variables for Dev Deployment
        run: echo $GITHUB_ENV

      - name: Terraform Initialization Dev
        run: make run-command-tf-init

      - name: Terraform Plan Dev
        run: make run-command-tf-plan

      - name: Terraform Apply Dev
        run: make run-command-tf-apply
      
